---
title: "Tracking Canada's Labour Statistics with Plotnine"
bibliography: references.bib
csl: diabetologia.csl
author: "Victor Yuan"
date: today
date-modified: today
language:
  title-block-modified: "Last Updated"
format: 
  html:
    toc: false
    embed-resources: false
    fig-align: center
include-in-header:
  - text: |
      <style>
      .panel-tabset {
          display: grid;
          grid-gap: 0;
          grid-template-columns: 15% 85%;
      }
      .panel-tabset-tabby {
          border: none !important;
          text-align: right;
      }
      .panel-tabset .nav-tabs {
          display: flex !important;
          flex-direction: column !important;
          flex-wrap: nowrap !important;
          border: solid transparent !important;
      }
      .panel-tabset .nav-tabs .nav-link:hover {
          text-decoration: underline !important;
          border: solid transparent !important;
      }
      .panel-tabset .nav-item {
          display: block !important;
          width: 100% !important;
          margin-bottom: 0 !important;
          flex: none !important;
      }
      .panel-tabset .nav-link {
          font-size: 0.75rem !important;
          text-align: right !important;
          padding: 0 2px;
          margin: 0 1px !important;
          line-height: normal !important;
      }
      .panel-tabset .tab-content {
        border: none;
      }

      </style>
jupyter: python3
editor: 
  render-on-save: true
execute: 
  echo: false
---

# Setup {.hidden .unlisted}

## Parameters

```{python}
from pyprojroot import here
import mpl_fontkit as fk
from brand_yml import Brand
```
```{python}
# | tags: [parameters]
LABOUR_DATA_FILE = here() / "data" / "14100355.csv"
FIGURE_THEME_SIZE = (9, 5)
FILTER_YEAR = (2018, 2025)
BRAND = Brand.from_yaml(here())
FONT_PRIMARY = BRAND.typography.base.model_dump()["family"]
FONT_SECONDARY = "Lato"
fk.install(FONT_PRIMARY)
fk.install(FONT_SECONDARY)
COLOR_BACKGROUND = BRAND.color.background
```

## Libraries

```{python}
from labourcan.data_processing import (
    read_labourcan,
    calculate_centered_rank,
    cut_pdiff,
    DEFAULT_CUTS
)
import polars as pl
import polars.selectors as cs
from mizani.bounds import squish
import mizani.labels as ml
import mizani.breaks as mb
import textwrap
from great_tables import GT, md, html
from plotnine import *
from IPython.display import display, Markdown
import matplotlib.pyplot as plt
import re
```

## Data

- Read data
- Calculate Ranking 
- Set color mapping
- Calculate stats

```{python}
labour = read_labourcan(LABOUR_DATA_FILE)

# Remove Aggregated Rows
labour_filtered = labour.filter(
    ~pl.col("Industry").is_in(
        [
            "Total employed, all industries",
            "Goods-producing sector",
            "Services-producing sector",
        ]
    )
)

# Calculate ranking based on monthly % change
labour_processed = calculate_centered_rank(labour_filtered)

# Bin % difference
labour_processed_cutted = cut_pdiff(labour_processed, DEFAULT_CUTS)
labour_processed_filtered = labour_processed_cutted.filter(
    pl.col("YEAR") >= FILTER_YEAR[0], pl.col("YEAR") <= FILTER_YEAR[1]
)

COLOR_MAPPING = {
    "(-inf, -0.05]": "#d82828ff",
    "(-0.05, -0.025]": "#fa6f1fff",
    "(-0.025, -0.012]": "#f1874aff",
    "(-0.012, -0.008]": "#f1b274ff",
    "(-0.008, -0.004]": "#FEE08B",
    "(-0.004, 0]": "#FFFFBF",
    "0": "#a8a8a8ff",
    "(0, 0.004]": "#E6F5D0",
    "(0.004, 0.008]": "#bce091ff",
    "(0.008, 0.012]": "#9ad65fff",
    "(0.012, 0.025]": "#78b552ff",
    "(0.025, 0.05]": "#5cb027ff",
    "(0.05, inf]": "#1f6fc6ff",
}
LEGEND_LABELS = [
    "-5%",
    "",
    "",
    "-1%",
    "",
    "",
    "No change",
    "",
    "",
    "1%",
    "",
    "",
    "5%",
]
```

Stats

```{python}
def make_subtitle_for_industry(df, INDUSTRY):
    # Define offsets
    offsets = {
        "1M": 1,
        "5M": 5,
        "1Y": 12,
        "5Y": 60,
    }

    # Sort by industry + date
    labour_offset = df
    labour_offset = labour_offset.sort(["Industry", "DATE_YMD"])

    # Compute diffs and %diffs for each horizon
    for label, months in offsets.items():
        labour_offset = labour_offset.with_columns(
            [
                (pl.col("DATE_YMD").shift(months).alias(f"DATE_YMD_{label}")),
                (
                    pl.col("VALUE")
                    .shift(months)
                    .over("Industry")
                    .alias(f"VALUE_{label}")
                ),
                (
                    pl.col("VALUE") - pl.col("VALUE").shift(months).over("Industry")
                ).alias(f"DIFF_{label}"),
                (
                    (pl.col("VALUE") - pl.col("VALUE").shift(months).over("Industry"))
                    / pl.col("VALUE").shift(months).over("Industry")
                    * 100
                ).alias(f"PDIFF_{label}"),
            ]
        )
    # convert to dictionary for easier access
    stats = labour_offset.filter(
        pl.col("Industry") == INDUSTRY, pl.col("DATE_YMD") == pl.col("DATE_YMD").max()
    ).to_dicts()[0]

    periods = [
        f"{stats['DIFF_1M'] * 1000:<+8,.0f} {f'({stats["PDIFF_1M"]:+.2f}%)':<10} Past Month",
        f"{stats['DIFF_5M'] * 1000:<+8,.0f} {f'({stats["PDIFF_5M"]:+.2f}%)':<10} Past 5 Months",
        f"{stats['DIFF_1Y'] * 1000:<+8,.0f} {f'({stats["PDIFF_1Y"]:+.2f}%)':<10} Past Year",
        f"{stats['DIFF_5Y'] * 1000:<+8,.0f} {f'({stats["PDIFF_5Y"]:+.2f}%)':<10} Past 5 Years",
    ]

    subtitle_text = "\n".join(periods)
    return subtitle_text
```

# Sector Shifts: Where Canada's Jobs Are Moving

Track the number of industries gaining or losing jobs each month. Boxes are shaded based on percentage change from previous month in each industry's employment levels. Change in employment levels is listed for 1 month, 5 months, 1 year, and 5 years. Data pulled directly from StatCan @statcan. 

::: {.panel-tabset .nav-pills .column-page-inset}

### Select an Industry

```{python}
# | output: asis
plot_data = labour_processed_filtered
INDUSTRY = "Total employed, all industries"

#  use the unfiltered labour df to generate the stats for the total
subtitle_text = make_subtitle_for_industry(labour, INDUSTRY)

plot = (
    ggplot(
        plot_data,
        aes(x="DATE_YMD", y="centered_rank_across_industry", fill="PDIFF_BINNED"),
    )
    + geom_tile(color="white", height=0.95)
    + theme_tufte()
    + theme(
        text=element_text(family=FONT_PRIMARY),
        figure_size=FIGURE_THEME_SIZE,
        axis_text_y=element_text(family=FONT_SECONDARY),
        axis_text_x=element_text(family=FONT_SECONDARY),
        axis_title_y=element_text(weight=300),
        legend_justification_right=1,
        legend_position="right",
        legend_text_position="right",
        legend_title_position="top",
        legend_key_spacing=0,
        legend_key_width=15,
        legend_key_height=15,
        legend_text=element_text(size=8, family=FONT_SECONDARY),
        legend_title=element_blank(),
        plot_title=element_text(ha="left"),
        plot_subtitle=element_text(ha="left", margin={"b": 1, "units": "lines"}),
        plot_background=element_rect(fill=COLOR_BACKGROUND, color=COLOR_BACKGROUND),
    )
    + scale_fill_manual(values=COLOR_MAPPING, labels=LEGEND_LABELS)
    + guides(fill=guide_legend(ncol=1, reverse=True))
    + scale_x_datetime(
        labels=ml.label_date("%Y"),  # Format labels to show only the year
        expand=(0, 0),
        breaks=mb.breaks_date_width("1 years"),
    )
    + labs(
        x="",
        y="< SECTORS FALLING            SECTORS RISING >",
        subtitle=subtitle_text,
        title=re.sub(r" \[.*?\]$", "", INDUSTRY),
    )
)
plot
```


```{python}
# | output: asis
ALL_INDUSTRIES = (
    labour_filtered.select("Industry").unique(maintain_order=True).to_series().to_list()
)

for INDUSTRY in ALL_INDUSTRIES:
    display(Markdown(f"### {re.sub(r' \[.*?\]$', '', INDUSTRY)}"))
    plot_data_subsetted = plot_data.filter(pl.col("Industry") == INDUSTRY)
    subtitle_text = make_subtitle_for_industry(labour, INDUSTRY)
    p = (
        plot
        + geom_point(data=plot_data_subsetted, color="black", fill="black")
        + labs(subtitle=subtitle_text, title=re.sub(r" \[.*?\]$", "", INDUSTRY))
    )
    p.show()
    display(Markdown(f" "))
```

:::


### References

::: {#refs}
:::